name: Push to Feature Branch

on:
  push:
    branches-ignore:
      - main

concurrency:
  group: ${{ github.head_ref || github.ref_name }} 
  cancel-in-progress: true

env:
  WORKING_DIR: './base'
  TF_LOG: WARN
  TF_INPUT: false

jobs:
  tf_checks:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      id: tf_init
      run: terraform init
      continue-on-error: true

    - name: Terraform Format
      id: tf_fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Validate
      id: tf_validate
      run: terraform validate -no-color
      continue-on-error: true
    
    - name: Terraform Plan
      id: tf_plan
      run: terraform plan -no-color
      continue-on-error: true

    - name: Create Job Summary
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 0. Create helper function
          function emojiStatus(status) {
            return (status === 'success') ? '‚úÖ' : '‚ùå'
          }
    
          // 1. Prepare `tf_checks` output
          const output = `
            #### ${emojiStatus('${{ steps.tf_init.outcome }}')} Terraform Init ‚öôÔ∏è

            #### ${emojiStatus('${{ steps.tf_fmt.outcome }}')} Terraform Format üñå
            
            #### ${emojiStatus('${{ steps.tf_validate.outcome }}')} Terraform Validate ü§ñ
            <details><summary>Show Output</summary>
            
            \`\`\`
            ${{ steps.tf_validate.outputs.stdout || steps.tf_validate.outputs.stderr }}
            \`\`\`
            
            </details>
            
            #### ${emojiStatus('${{ steps.tf_plan.outcome }}')} Terraform Plan üìñ
            <details><summary>Show Output</summary>
            
            \`\`\`
            ${{ steps.tf_plan.outputs.stdout}}
            ${{ steps.tf_plan.outputs.stderr}}
            \`\`\`
            
            </details>
            
            *Actor: @${{ github.actor }}
            Event: \`${{ github.event_name }}\`
            Working Directory: \`${{ env.WORKING_DIR }}\`
            Workflow: \`${{ github.workflow }}\`*
          `;

          // 2. Add `GITHUB_STEP_SUMMARY`
          await core.summary
            .addHeading('Results')
            .addRaw(output)
            .write()

          // 3. Fail the workflow if one of the steps failed
          const statuses = [
            '${{ steps.tf_init.outcome }}',
            '${{ steps.tf_fmt.outcome }}',
            '${{ steps.tf_validate.outcome }}',
            '${{ steps.tf_plan.outcome }}'
          ]
          if (statuses.includes("failure")) {
            core.setFailed("Terraform failed, check step summary for details.")
          }

          /*
          * IF THE FEATURE BRANCH HAS AN OPEN PULL REQUEST
          * THEN ADD BOT COMMENT WITH `GITHUB_STEP_SUMMARY` TO THE PULL REQUEST
          */

          if (context.payload.ref.startsWith('refs/heads/')) {
            // Get the branch name from the ref
            const branch = context.payload.ref.replace('refs/heads/', '');
          
            // Check if there is an open pull request for the branch
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${branch}`,
            });
          
            if (pullRequests.length > 0) {
              // There is an open pull request for the branch
              const pullRequest = pullRequests[0];
          
              // Retrieve existing bot comments for the PR
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pullRequest.number,
              });
          
              const ghaBotComment = comments.find(comment => {
                return (
                  comment.user.type === 'Bot' &&
                  comment.user.login === 'github-actions[bot]' &&
                  comment.body.includes('Terraform Init')
                );
              });
          
              // Update comment if it exists, otherwise create a new one
              if (ghaBotComment) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: ghaBotComment.id,
                  body: output,
                });
              } else {
                github.rest.issues.createComment({
                  issue_number: pullRequest.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output,
                });
              }
            }
          }

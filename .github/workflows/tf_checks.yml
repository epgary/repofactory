name: Terraform

on:
  push:
    branches:
      - '*'
      - '!main'
  pull_request:
    branches:
      - main

env:
  WORKING_DIR: './base'
  TF_LOG: INFO
  TF_INPUT: false

jobs:
  tf_checks:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      id: init
      run: terraform init
      continue-on-error: true

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: true
    
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true

    - uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 0. Create helper function
          function emojiStatus(status) {
            return (status === 'success') ? '‚úÖ' : '‚ùå'
          }
    
          // 1. Prepare `tf_checks` output
          const output =`
            #### ${emojiStatus('${{ steps.init.outcome }}')} Terraform Init ‚öôÔ∏è

            #### ${emojiStatus('${{ steps.fmt.outcome }}')} Terraform Format üñå
            
            #### ${emojiStatus('${{ steps.validate.outcome }}')} Terraform Validate ü§ñ
            <details><summary>Show Validate</summary>
            
            \`\`\`
            ${{ steps.validate.outputs.stdout || steps.validate.outputs.stderr }}
            \`\`\`
            
            </details>
            
            #### ${emojiStatus('${{ steps.plan.outcome }}')} Terraform Plan üìñ
            <details><summary>Show Plan</summary>
            
            \`\`\`
            ${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}
            Action: \`${{ github.event_name }}\`
            Working Directory: \`${{ env.WORKING_DIR }}\`
            Workflow: \`${{ github.workflow }}\`*
          `;

          // 2. Add `GITHUB_STEP_SUMMARY`
          await core.summary
            .addHeading('Results')
            .addRaw(output)
            .write()

          // 3. Fail the workflow if one of the steps failed
          const statuses = [
            '${{ steps.init.outcome }}',
            '${{ steps.fmt.outcome }}',
            '${{ steps.validate.outcome }}',
            '${{ steps.plan.outcome }}'
          ]
          if (statuses.includes("failure")) {
            core.setFailed("Terraform failed, check step summary for details.")
          }

          /*
           * EXECUTE ONLY ON PULL REQUEST
           */

          if (context.eventName === 'pull_request') {
            // 4. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const ghaBotComment = comments.find(comment => {
              return (
                comment.user.type === 'Bot' &&
                comment.user.login === 'github-actions[bot]' &&
                comment.body.includes('Terraform Init')
              )
            })
    
            // 5. If comment already exists, update it, otherwise create a new one
            if (ghaBotComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: ghaBotComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
          }